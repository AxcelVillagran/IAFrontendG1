import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/network_data.dart';

class DatabaseService {
  static final String _baseUrl = 'http://127.0.0.1:5000'; // Replace with your actual backend URL

  static Future<List<dynamic>> predictAndSort(List<dynamic> inputData) async {
    final String url = '$_baseUrl/predict';
    
    try {
      // Send a POST request with the input data
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode({'input': inputData}),
      );

      // Check for successful response
      if (response.statusCode == 200) {
        // Decode the JSON response as List<dynamic>
        List<dynamic> outputList = json.decode(response.body)['output'] as List<dynamic>;
        
        //print(outputList);

        // Combine inputData with outputList based on their indices
        List<dynamic> combinedList = [];
        for (int i = 0; i < inputData.length; i++) {
          Map<String, dynamic> combinedItem = Map<String, dynamic>.from(inputData[i]);
          //print(combinedItem);
          combinedItem['output']=outputList[i];
          //print(outputList[i]);
          combinedList.add(combinedItem);
        }

        // Sort the combined list based on the 'output' key in descending order
        combinedList.sort((a, b) {
          var aValue = (a as Map<String, dynamic>)['output'] as num; // Ensure 'output' is a numeric value
          var bValue = (b as Map<String, dynamic>)['output'] as num;
          return bValue.compareTo(aValue); // Descending order
        });
        //print(combinedList);
        return combinedList;
      } else {
        // Handle error responses
        throw Exception('Failed to predict. Status code: ${response.statusCode}');
      }
    } catch (e) {
      // Handle exceptions
      print('Error: $e');
      return []; // Return an empty list in case of error
    }
  }
}

