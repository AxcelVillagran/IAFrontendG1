import 'dart:convert';
import 'dart:io';
import 'dart:async';
import 'package:flutter/material.dart';
import '../models/network_data.dart'; // Import the NetworkData model

class ButtonBarWidget extends StatefulWidget {
  @override
  _ButtonBarWidgetState createState() => _ButtonBarWidgetState();
}

class _ButtonBarWidgetState extends State<ButtonBarWidget> {
  bool _isDetectMalwareEnabled = false;
  List<NetworkData> _networkDataList = [];
  int _currentIndex = 0;
  bool _isLoading = false;

  Future<void> _scanNetwork(BuildContext context) async {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Obteniendo tr√°fico de la red...')),
    );

    try {
      final filePath = '${Directory.current.path}/captured_data.json';
      final file = File(filePath);
      final String jsonString = await file.readAsString();
      final List<dynamic> jsonData = json.decode(jsonString);

      final List<NetworkData> networkDataList = jsonData.map((item) => NetworkData.fromJson(item)).toList();

      setState(() {
        _isLoading = true;
        _networkDataList = networkDataList;
        _currentIndex = 0;
        _isDetectMalwareEnabled = true;
        _isLoading = false;
      });
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error al obtener datos: $e')),
      );
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _showNextItem() {
    setState(() {
      if (_currentIndex < _networkDataList.length - 1) {
        _currentIndex++;
      }
    });
  }

  void _showPreviousItem() {
    setState(() {
      if (_currentIndex > 0) {
        _currentIndex--;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blueGrey[900],
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 10.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: () => _scanNetwork(context),
                  child: Text('Escanear Trafico en la red'),
                  style: ElevatedButton.styleFrom(
                    padding: EdgeInsets.symmetric(horizontal: 20, vertical: 15),
                  ),
                ),
                ElevatedButton(
                  onPressed: _isDetectMalwareEnabled ? () => _detectMalware(context) : null,
                  child: Text('Detectar Malware'),
                  style: ElevatedButton.styleFrom(
                    padding: EdgeInsets.symmetric(horizontal: 20, vertical: 15),
                  ),
                ),
              ],
            ),
          ),
          
        ],
      ),
    );
  }

  void _detectMalware(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text('Detectando malware...'),
    ));
  }
}
