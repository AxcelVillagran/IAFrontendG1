import 'package:aimalwaredetector/capture/shell.dart';
import 'package:aimalwaredetector/models/network_data.dart';
import 'package:aimalwaredetector/models/network_result.dart';
import 'package:aimalwaredetector/screens/buttonWidget.dart';
import 'package:flutter/material.dart';
import 'dart:convert';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:aimalwaredetector/services/db_service.dart';



class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  List<NetworkData> networkDataList = [];
  bool isDataLoaded = false;
  List<NetworkResult> networkResultList = [];
  List<dynamic> jsonResponse = [];
  Future<void> loadJsonData() async {
    // Mostrar el diálogo de carga
    showDialog(
      context: context,
      barrierDismissible: false, // Evitar que se cierre el diálogo al hacer clic fuera
      builder: (BuildContext context) {
        return Center(
          child: CircularProgressIndicator(),
        );
      },
    );

    try {
      await startCapture();
      final filePath = '${Directory.current.path}/captured_data.json';
      final file = File(filePath);
      String jsonString = await file.readAsString();
      jsonResponse = json.decode(jsonString);


      setState(() {
        networkDataList = jsonResponse.map((data) => NetworkData.fromJson(data)).toList();
        isDataLoaded = true;
      });
    } catch (e) {
      print("Error loading JSON data: $e");
    } finally {
      // Cerrar el diálogo de carga
      Navigator.of(context).pop();
    }
  }

  Future<void> detectMalware() async {
    // Aquí iría la lógica para detectar malware
    //Future<List<dynamic>> JsonResults= DatabaseService.predictAndSort(jsonResponse);
    //List<dynamic> results = await JsonResults;
    //networkResultList = results.map((data) => NetworkResult.fromJson(data)).toList();

  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Detector de malware en la red'),
      ),
      body: Column(
        children: [
          ButtonBarWidget(
            loadJsonData: loadJsonData,
            detectMalware: detectMalware,
            isDataLoaded: isDataLoaded,
          ),
          Expanded(
            child: networkDataList.isEmpty
                ? Center(
                    child: Text(
                      'Escanea la red para empezar',
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  )
                : ListView.builder(
                    itemCount: networkDataList.length + 1,
                    itemBuilder: (context, index) {
                      if (index == 0) {
                        return Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Expanded(child: Text('Source', style: TextStyle(fontWeight: FontWeight.bold))),
                              Expanded(child: Text('Destination', style: TextStyle(fontWeight: FontWeight.bold))),
                              Expanded(child: Text('Protocol', style: TextStyle(fontWeight: FontWeight.bold))),
                              Expanded(child: Text('Timestamp', style: TextStyle(fontWeight: FontWeight.bold))),
                              Expanded(child: Text('Service', style: TextStyle(fontWeight: FontWeight.bold))),
                              //Expanded(child: Text('Duration', style: TextStyle(fontWeight: FontWeight.bold))),
                              Expanded(child: Text('Conn State', style: TextStyle(fontWeight: FontWeight.bold))),
                              Expanded(child: Text('History', style: TextStyle(fontWeight: FontWeight.bold))),
                            ],
                          ),
                        );
                      } else {
                        final data = networkDataList[index - 1];
                        return Column(
                          children: [
                            Padding(
                              padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Expanded(child: Text(data.source)),
                                  Expanded(child: Text(data.destination)),
                                  Expanded(child: Text(data.protocol)),
                                  Expanded(child: Text(data.timestamp.toString())),
                                  Expanded(child: Text(data.service ?? '-')),
                                  //Expanded(child: Text(data.duration)),
                                  Expanded(child: Text(data.conn_state)),
                                  Expanded(child: Text(data.history)),
                                ],
                              ),
                            ),
                            Divider(), // Añadir separador entre filas
                          ],
                        );
                      }
                    },
                  ),
          ),
        ],
      ),
    );
  }
}


