import 'package:aimalwaredetector/capture/shell.dart';
import 'package:aimalwaredetector/models/network_data.dart';
import 'package:aimalwaredetector/models/network_result.dart';
import 'package:aimalwaredetector/screens/buttonWidget.dart';
import 'package:flutter/material.dart';
import 'dart:convert';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:aimalwaredetector/services/db_service.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  List<NetworkData> networkDataList = [];
  List<NetworkResult> networkResultList = [];
  List<dynamic> jsonResponse = [];
  bool isDataLoaded = false;
  bool isMalwareDetected = false;

  Future<void> loadJsonData() async {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Center(child: CircularProgressIndicator());
      },
    );

    try {
      await startCapture();
      final filePath = '${Directory.current.path}/captured_data.json';
      final file = File(filePath);
      String jsonString = await file.readAsString();
      jsonResponse = json.decode(jsonString);

      setState(() {
        networkDataList = jsonResponse.map((data) => NetworkData.fromJson(data)).toList();
        isDataLoaded = true;
        isMalwareDetected = false;
      });
    } catch (e) {
      print("Error loading JSON data: $e");
    } finally {
      Navigator.of(context).pop();
    }
  }

  Future<void> detectMalware() async {
    Future<List<dynamic>> jsonResults = DatabaseService.predictAndSort(jsonResponse);
    List<dynamic> results = await jsonResults;
    //print(results);
    setState(() {
      networkResultList = results.map((data) => NetworkResult.fromJson(data)).toList();
      isMalwareDetected = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Detector de malware en la red'),
      ),
      body: Column(
        children: [
          ButtonBarWidget(
            loadJsonData: loadJsonData,
            detectMalware: detectMalware,
            isDataLoaded: isDataLoaded,
          ),
          Expanded(
            child: isMalwareDetected
                ? buildNetworkResultListView()
                : buildNetworkDataListView(),
          ),
        ],
      ),
    );
  }

  Widget buildNetworkDataListView() {
    return networkDataList.isEmpty
        ? Center(
            child: Text(
              'Escanea la red para empezar',
              style: TextStyle(fontSize: 18, color: Colors.white),
            ),
          )
        : ListView.builder(
            itemCount: networkDataList.length + 1,
            itemBuilder: (context, index) {
              if (index == 0) {
                return buildHeaderRow();
              } else {
                final data = networkDataList[index - 1];
                return buildDataRow(data);
              }
            },
          );
  }

  Widget buildNetworkResultListView() {
    return ListView.builder(
      itemCount: networkResultList.length + 1,
      itemBuilder: (context, index) {
        if (index == 0) {
          return buildResultsRow();
        } else {
          final result = networkResultList[index - 1];
          return buildResultRow(result);
        }
      },
    );
  }

  Widget buildHeaderRow() {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(child: Text('Source', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Destination', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Protocol', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Timestamp', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Service', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Conn State', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('History', style: TextStyle(fontWeight: FontWeight.bold))),
          //Expanded(child: Text('Output', style: TextStyle(fontWeight: FontWeight.bold))), // New column for output
        ],
      ),
    );
  }

    Widget buildResultsRow() {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Expanded(child: Text('Source', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Destination', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Protocol', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Timestamp', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Service', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Conn State', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('History', style: TextStyle(fontWeight: FontWeight.bold))),
          Expanded(child: Text('Result', style: TextStyle(fontWeight: FontWeight.bold))), // New column for output
        ],
      ),
    );
  }

  Widget buildDataRow(NetworkData data) {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(child: Text(data.source)),
              Expanded(child: Text(data.destination)),
              Expanded(child: Text(data.protocol)),
              Expanded(child: Text(data.timestamp.toString())),
              Expanded(child: Text(data.service ?? '-')),
              Expanded(child: Text(data.conn_state)),
              Expanded(child: Text(data.history)),
            ],
          ),
        ),
        Divider(),
      ],
    );
  }

  Widget buildResultRow(NetworkResult result) {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 8.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(child: Text(result.source)),
              Expanded(child: Text(result.destination)),
              Expanded(child: Text(result.protocol)),
              Expanded(child: Text(result.timestamp.toString())),
              Expanded(child: Text(result.service ?? '-')),
              Expanded(child: Text(result.conn_state)),
              Expanded(child: Text(result.history)),
              Expanded(child: Text(
    result.output == 1 ? 'Maligno' : 'Benigno',
    style: TextStyle(
      color: result.output == 1 ? Colors.red : Colors.white,  // Red for 'Maligno', Black for 'Benigno'
    ),)), // Display the output
            ],
          ),
        ),
        Divider(),
      ],
    );
  }
}
